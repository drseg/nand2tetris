import XCTest
@testable import Nand2Tetris

class VMTranslatorTests: XCTestCase {
    var translator: VMTranslator!
    
    override func setUp() {
        translator = VMTranslator()
    }
    
    func translate(_ vmCode: String) -> String {
        translator.translate(vmCode)
    }
    
    func testPushConstant() {
        let vmCode = "push constant 17"
        let assembly =
                    """
                    @17
                    D=A
                    @SP
                    A=M
                    M=D
                    @SP
                    M=M+1
                    """
        translate(vmCode) => assembly
    }
    
    func testPushTwoConstants() {
        let vmCode =
                    """
                    push constant 17
                    push constant 22
                    """
        let assembly =
                    """
                    @17
                    D=A
                    @SP
                    A=M
                    M=D
                    @SP
                    M=M+1
                    @22
                    D=A
                    @SP
                    A=M
                    M=D
                    @SP
                    M=M+1
                    """
        translate(vmCode) => assembly
    }
    
    func testAdd() {
        let vmCode = "add"
        let assembly =
                    """
                    @SP
                    A=M
                    D=M
                    @SP
                    M=M-1
                    A=M
                    D=D+M
                    """
        translate(vmCode) => assembly
    }
    
    func testSub() {
        let vmCode = "sub"
        let assembly =
                    """
                    @SP
                    A=M
                    D=M
                    @SP
                    M=M-1
                    A=M
                    D=D-M
                    """
        translate(vmCode) => assembly
    }
    
    func testNeg() {
        let vmCode = "neg"
        let assembly =
                    """
                    @SP
                    A=M
                    M=!M
                    """
        translate(vmCode) => assembly
    }
    
    func testEq() {
        let vmCode = "eq"
        let assembly =
                    """
                    @SP
                    A=M
                    D=M
                    @SP
                    M=M-1
                    A=M
                    D=D-M
                    @EQ
                    D;JEQ
                    D=-1
                    (EQ)
                    """
        translate(vmCode) => assembly
    }
}

/// Specs:
///
/// Arithmetic commands:
///
/// add
/// sub
/// neg
/// eq ( -> true or false, 0 or -1)
/// gt ( -> true or false, 0 or -1)
/// lt ( -> true or false, 0 or -1)
/// and
/// or
/// not
///
/// Memory access commands:
///
/// (but how do you decide what to initialise the base address to?)
///
/// constant (not on stack, no pop)
///
/// local
/// argument
/// this
/// that
/// pointer
/// temp
/// static
///
/// Ram:
///
/// 0-15 -> Virtual Regsters
/// 16-255 -> Static Vars (auto generated by assembly)
/// 256-2047 -> Stack
/// 2048-16483 -> Heap
/// 16384-24575 -> IO
///
/// Predefined assembly addresses corresponding to VM memory access:
///
/// SP -> Stack Pointer -> RAM[0]
/// LCL -> Local Pointer -> RAM[1]
/// ARG -> Argument Pointer -> RAM[2]
/// THIS -> This pointer -> RAM[3]
/// THAT -> That pointer -> RAM[4]
/// RAM[5-12] -> Temp segment
/// RAM[13-15] -> General purpose registers
