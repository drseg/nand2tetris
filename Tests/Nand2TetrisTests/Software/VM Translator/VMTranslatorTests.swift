import XCTest
@testable import Nand2Tetris

class VMTranslatorTests: XCTestCase {
    var translator: VMTranslator!
    
    override func setUp() {
        translator = VMTranslator()
    }
    
    func translate(_ vmCode: String) -> String {
        translator.translate(vmCode)
    }
    
    func generateConstant(_ c: String) -> String {
        """
        @\(c)
        D=A
        @SP
        A=M
        M=D
        @SP
        M=M+1
        """
    }
    
    func testPushConstants() {
        let vmCode =
                    """
                    push constant 17
                    push constant 22
                    """
        let assembly =
                    """
                    \(generateConstant("17"))
                    \(generateConstant("22"))
                    """
        translate(vmCode) => assembly
    }
    
    func generateArithmetic(_ sign: String) -> String {
        let dCommand = sign == "-"
        ? "D=M\(sign)D"
        : "D=D\(sign)M"
        
        return """
        @SP
        A=M-1
        D=M
        @SP
        M=M-1
        A=M-1
        \(dCommand)
        @SP
        A=M-1
        M=D
        """
    }
    
    func testAdd() {
        translate("add") => generateArithmetic("+")
    }
    
    func testSub() {
        translate("sub") => generateArithmetic("-")
    }
    
    func testAnd() {
        translate("and") => generateArithmetic("&")
    }
    
    func testOr() {
        translate("or") => generateArithmetic("|")
    }
    
    func generateUnary(_ sign: String) -> String {
        """
        @SP
        A=M-1
        M=\(sign)M
        @SP
        A=M-1
        M=D
        """
    }
    
    func testNot() {
        translate("not") => generateUnary("!")
    }
    
    func testNeg() {
        translate("neg") => generateUnary("-")
    }
    
    func generateConditional(_ code: String) -> String {
        """
        @SP
        A=M-1
        D=M
        @SP
        M=M-1
        A=M-1
        D=M-D
        @SP
        A=M-1
        M=D
        @\(code)
        D;J\(code.prefix(2))
        D=-1
        (\(code))
        @SP
        A=M-1
        M=D
        """
    }
    
    func testEQ() {
        translate("eq") => generateConditional("EQ0")
    }
    
    func testGT() {
        translate("gt") => generateConditional("GT0")
    }
    
    func testLT() {
        translate("lt") => generateConditional("LT0")
    }
    
    func testChainedConditionals() {
        translate("lt\nlt") =>
        (generateConditional("LT0") + "\n" + generateConditional("LT1"))
    }
}

class VMTranslatorAcceptanceTests: ComputerTestCase {
    override func setUp() {
        super.setUp()
        c.memory(256.b, "1", 0.b, "1")
        sleepTime = 125000
    }
    
    func testAdd2And3() {
        let translator = VMTranslator()
        let assembler = Assembler()
        
        let add2And3 =
                    """
                    push constant 2
                    push constant 3
                    add
                    """
        let assembly = translator.translate(add2And3)
        let binary = assembler.assemble(assembly)
        
        runProgram(binary)
        c.cpu.dRegister.value.toDecimal() => "5"
    }
}

/// Specs:
///
/// Arithmetic commands:
///
/// add V
/// sub V
/// neg V
/// eq ( -> true or false, 0 or -1) V
/// gt ( -> true or false, 0 or -1) V
/// lt ( -> true or false, 0 or -1) V
/// and V
/// or V
/// not V
///
/// Memory access commands:
///
/// (but how do you decide what to initialise the base address to?)
///
/// constant (not on stack, no pop)
///
/// local
/// argument
/// this
/// that
/// pointer
/// temp
/// static
///
/// Ram:
///
/// 0-15 -> Virtual Regsters
/// 16-255 -> Static Vars (auto generated by assembly)
/// 256-2047 -> Stack
/// 2048-16483 -> Heap
/// 16384-24575 -> IO
///
/// Predefined assembly addresses corresponding to VM memory access:
///
/// SP -> Stack Pointer -> RAM[0]
/// LCL -> Local Pointer -> RAM[1]
/// ARG -> Argument Pointer -> RAM[2]
/// THIS -> This pointer -> RAM[3]
/// THAT -> That pointer -> RAM[4]
/// RAM[5-12] -> Temp segment
/// RAM[13-15] -> General purpose registers
